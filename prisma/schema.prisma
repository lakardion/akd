// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Student {
    id          String  @id @default(cuid())
    name        String
    lastName    String
    // we could outsource this to another table. If we know which the Universities are (and even make them manageable)
    university  String
    //same for this
    faculty     String
    //same for this
    course      String
    hourBalance Decimal @default(0)
    isActive    Boolean @default(true)

    payments            Payment[]
    classSessionStudent ClassSessionStudent[]
}

model Payment {
    id            String            @id @default(cuid())
    publicId      Int               @unique @default(autoincrement())
    studentId     String
    hourId        String            @unique
    value         Decimal
    date          DateTime
    paymentMethod PaymentMethodType

    student Student @relation(fields: [studentId], references: [id])
    hour    Hour    @relation(fields: [hourId], references: [id])
}

model TeacherPayment {
    id            String            @id @default(cuid())
    publicId      Int               @unique @default(autoincrement())
    teacherId     String
    value         Decimal
    date          DateTime
    paymentMethod PaymentMethodType

    teacher Teacher @relation(fields: [teacherId], references: [id])
}

model ClassSessionStudent {
    studentId      String
    classSessionId String

    student      Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
    classSession ClassSession @relation(fields: [classSessionId], references: [id], onDelete: Cascade)

    @@unique([classSessionId, studentId])
}

model ClassSession {
    id                String   @id @default(cuid())
    date              DateTime
    hourId            String   @unique
    teacherId         String?
    teacherHourRateId String

    hour                Hour                  @relation(fields: [hourId], references: [id])
    teacher             Teacher?              @relation(fields: [teacherId], references: [id])
    classSessionStudent ClassSessionStudent[]
    teacherHourRate     HourRate              @relation(fields: [teacherHourRateId], references: [id])
}

model Hour {
    id    String  @id @default(cuid())
    value Decimal

    classSession ClassSession?
    payment      Payment?
}

model Teacher {
    id       String  @id @default(cuid())
    name     String
    lastName String
    balance  Decimal @default(0)
    isActive Boolean @default(true)

    classSessions  ClassSession[]
    teacherPayment TeacherPayment[]
}

model HourRate {
    id          String       @id @default(cuid())
    rate        Decimal
    type        HourRateType
    description String
    isActive    Boolean      @default(true)

    classSessions ClassSession[]
}

model HourPackage {
    id          String  @id @default(cuid())
    packHours   Decimal
    totalValue  Decimal
    description String
    isActive    Boolean @default(true)
}

enum HourRateType {
    TEACHER
    STUDENT
}

enum PaymentMethodType {
    CASH
    TRANSFER
}
